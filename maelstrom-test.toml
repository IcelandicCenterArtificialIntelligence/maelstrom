[[directives]]
include_shared_libraries = true

[[directives]]
filter = "package.equals(maelstrom-worker) && name.starts_with(executor::)"
layers = [{ stubs = [ "/proc/", "/sys/", "/tmp/", "dev/{fuse,full,null,ptmx,random,tty,urandom,zero}" ] }]
mounts = [
    { type = "tmp", mount_point = "/tmp" },
    { type = "proc", mount_point = "/proc" },
    { type = "sys", mount_point = "/sys" },
]
devices = ["fuse", "full", "null", "ptmx", "random", "tty", "urandom", "zero"]

[[directives]]
filter = "package.equals(maelstrom-worker) && name.equals(executor::tests::local_network)"
network = "loopback"

[[directives]]
filter = """
(package.equals(maelstrom-broker) && name.starts_with(artifact_fetcher::tests)) ||
package.equals(maelstrom-test-runner)"""
layers = [{ stubs = ["/proc/", "/tmp/"] }]
mounts = [
    { type = "tmp", mount_point = "/tmp" },
    { type = "proc", mount_point = "/proc" },
]

[[directives]]
filter = "package.equals(maelstrom-client) && test.equals(integration_test)"
layers = [
    { stubs = ["/{proc,tmp}/", "/dev/{null,fuse}"] },
    { paths = ["<build-dir>/maelstrom-client"], canonicalize = true }
]
mounts = [
    { type = "tmp", mount_point = "/tmp" },
    { type = "proc", mount_point = "/proc" },
]
devices = ["null", "fuse"]
environment = { HOME = "/tmp" }

[[directives]]
filter = """
package.equals(maelstrom-client-process) ||
package.equals(maelstrom-container) ||
package.equals(maelstrom-fuse) ||
package.equals(maelstrom-util)"""
layers = [{ stubs = ["/tmp/"] }]
mounts = [{ type = "tmp", mount_point = "/tmp" }]

[[directives]]
filter = "package.equals(maelstrom-util) && name.equals(io::splicer)"
added_mounts = [
    { type = "proc", mount_point = "/proc" },
]
added_layers = [{ stubs = [ "proc/" ] }]

[[directives]]
filter = """
package.equals(maelstrom-util) && (
    name.equals(config::common::tests::broker_addr_deserialize_from_hostname_string) ||
    name.equals(config::common::tests::broker_addr_from_str)
)"""
[[directives.added_layers]]
paths = [ "crates/maelstrom-util/src/config/hosts" ]
strip_prefix = "crates/maelstrom-util/src/config/"
prepend_prefix = "/etc/"

[[directives]]
filter = "package.equals(maelstrom-fuse) || package.equals(maelstrom-layer-fs)"
mounts = [
    { type = "tmp", mount_point = "/tmp" },
    { type = "proc", mount_point = "/proc" },
]
working_directory = "/root"
added_layers = [{ stubs = [ "root/", "proc/", "tmp/", "dev/fuse", "dev/null" ] }]
added_devices = ["null", "fuse"]

[[directives]]
filter = "package.equals(cargo-maelstrom) && test.equals(integration_test)"
image.name = "rust:alpine"
image.use = ["layers", "environment"]
added_layers = [
    { stubs = ["/dev/{full,fuse,null,urandom,random,zero}"] },
    { paths = ["<build-dir>/client-bg-proc"], canonicalize = true }
]
devices = ["full", "fuse", "null", "urandom", "random", "zero"]
mounts = [
    { type = "tmp", mount_point = "/tmp" },
    { type = "tmp", mount_point = "/root" },
    { type = "proc", mount_point = "/proc" },
    { type = "sys", mount_point = "/sys" },
]

[[directives]]
added_environment = { RUST_BACKTRACE = "$env{RUST_BACKTRACE:-0}" }
