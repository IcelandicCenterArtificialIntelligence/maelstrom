[[directives]]
include_shared_libraries = true

[[directives]]
filter = "package.equals(maelstrom-worker) && name.starts_with(executor::)"
layers = [{ tar = "proc-and-tmp.tar" }]
mounts = [
    { fs_type = "tmp", mount_point = "/tmp" },
    { fs_type = "proc", mount_point = "/proc" },
    { fs_type = "sys", mount_point = "/sys" },
]
devices = ["full", "null", "random", "tty", "urandom", "zero"]

[[directives]]
filter = "package.equals(maelstrom-broker) && name.starts_with(artifact_fetcher::tests)"
layers = [{ tar = "proc-and-tmp.tar" }]
mounts = [
    { fs_type = "tmp", mount_point = "/tmp" },
    { fs_type = "proc", mount_point = "/proc" },
]

[[directives]]
filter = "package.equals(cargo-maelstrom)"
image.name = "rust"
image.use = ["layers", "environment"]
enable_loopback = true
#include_shared_libraries = false
added_layers = [{ tar = "dev-null.tar" }]
mounts = [
    { fs_type = "tmp", mount_point = "/tmp" },
    { fs_type = "tmp", mount_point = "/root" },
    { fs_type = "proc", mount_point = "/proc" },
]

[[directives]]
filter = "package.equals(maelstrom-container)"
layers = [{ tar = "proc-and-tmp.tar" }]
mounts = [ { fs_type = "tmp", mount_point = "/tmp" } ]

[[directives]]
filter = "package.equals(maelstrom-client)"
layers = [{ tar = "proc-and-tmp.tar" }]
mounts = [ { fs_type = "tmp", mount_point = "/tmp" } ]

[[directives]]
filter = "package.equals(maelstrom-client) && test.equals(integration_test)"
image.name = "alpine"
image.use = ["layers", "environment"]
enable_loopback = true
mounts = [
    { fs_type = "tmp", mount_point = "/tmp" },
    { fs_type = "tmp", mount_point = "/root" },
    { fs_type = "proc", mount_point = "/proc" },
]

[[directives]]
filter = "package.equals(maelstrom-util) && (name.starts_with(manifest::) || name.starts_with(fs::))"
layers = [{ tar = "proc-and-tmp.tar" }]
mounts = [ { fs_type = "tmp", mount_point = "/tmp" } ]

[[directives]]
added_environment = { RUST_BACKTRACE = "$env{RUST_BACKTRACE:-0}" }
